{"version":3,"sources":["components/Logs/components/CallLogs/CallLog.module.scss","components/Logs/components/CallLogs/CallLogColProps.tsx","components/Logs/components/CallLogs/CallLogs.tsx","components/Logs/components/EventLogs/index.tsx","components/Logs/components/BulkDownloads/index.tsx","components/Logs/components/MyCalls/index.tsx","components/Logs/components/SMSMMSLogs/index.tsx","pages/logs/LogsPage.tsx"],"names":["module","exports","CallTypes","getHHmmSS","colVal","Date","toISOString","substr","callTypesHTML","INBOUND","path","mdiPhoneIncoming","size","horizontal","vertical","OUTBOUND","mdiPhoneOutgoing","rotate","INTERNAL","mdiRefresh","EXTERNAL","mdiFileRefreshOutline","SERVICE","mdiFaceAgent","CallLogProps","key","label","render","colData","format","parseISO","className","styles","callTypesContainer","toUpperCase","getCamelCaseString","mdiHeadphones","Link","href","onClick","GET_CALL_LOGS","gql","CallLogs","React","useState","errorSnack","setErrorSnack","page","setPage","rowsPerPage","setRowsPerPage","useQuery","loading","error","data","rows","callLogs","length","pagedRows","slice","pagesOptions","Paper","paper","spinner","name","message","open","handleClose","rowsPerPageOptions","pagesCount","handleChangePage","_","newPage","handleChangeRowsPerPage","event","parseInt","target","value","objects","properties","showCheckBoxColumn","EventLogs","BulkDownloads","MyCalls","SMSMMSLogs","LogTabs","LogsPage","memo","TabsMenu"],"mappings":"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","file":"static/js/Logs.cbbe6ad6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"CallLog_paper__2VcpQ\",\"callTypesContainer\":\"CallLog_callTypesContainer__3hrxz\"};","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\"\nimport { parseISO, format } from \"date-fns\"\nimport Link from \"@material-ui/core/Link\"\nimport Icon from \"@mdi/react\"\nimport {\n  mdiPhoneOutgoing,\n  mdiPhoneIncoming,\n  mdiRefresh,\n  mdiFileRefreshOutline,\n  mdiFaceAgent,\n  mdiHeadphones,\n} from \"@mdi/js\"\nimport { ICallLog } from \"./CallLogs.type\"\nimport styles from \"./CallLog.module.scss\"\nimport { getCamelCaseString } from \"../../../../util\"\n\nenum CallTypes {\n  OUTBOUND = \"OUTBOUND\",\n  INTERNAL = \"INTERNAL\",\n  INBOUND = \"INBOUND\",\n  EXTERNAL = \"EXTERNAL\",\n  SERVICE = \"SERVICE\",\n}\n\nconst getHHmmSS = (colVal: number) =>\n  new Date(1000 * colVal).toISOString().substr(11, 8)\n\nexport const callTypesHTML = {\n  [CallTypes.INBOUND]: (\n    <Icon path={mdiPhoneIncoming} size={0.8} horizontal vertical />\n  ),\n  [CallTypes.OUTBOUND]: (\n    <Icon path={mdiPhoneOutgoing} size={0.8} horizontal vertical rotate={180} />\n  ),\n  [CallTypes.INTERNAL]: (\n    <Icon path={mdiRefresh} size={0.8} horizontal vertical rotate={180} />\n  ),\n  [CallTypes.EXTERNAL]: (\n    <Icon\n      path={mdiFileRefreshOutline}\n      size={0.8}\n      horizontal\n      vertical\n      rotate={180}\n    />\n  ),\n  [CallTypes.SERVICE]: (\n    <Icon path={mdiFaceAgent} size={0.8} horizontal vertical rotate={180} />\n  ),\n}\n\nexport const CallLogProps: IColType<ICallLog>[] = [\n  {\n    key: \"timeStart\",\n    label: \"Date/Time\",\n    render: colData => format(parseISO(colData), \"yyyy-MM-dd HH:mm:ss\"),\n  },\n  {\n    key: \"fromNumber\",\n    label: \"From/Number\",\n  },\n  {\n    key: \"toNumberDialled\",\n    label: \"Dialled/Number\",\n  },\n  {\n    key: \"connectedTo\",\n    label: \"Connected To\",\n  },\n  {\n    key: \"connectedToNumber\",\n    label: \"Connected To(number)\",\n  },\n  {\n    key: \"timeRinging\",\n    label: \"Time Ringing\",\n    render: colData => {\n      if (colData) {\n        return getHHmmSS(colData)\n      }\n      return \"\"\n    },\n  },\n  {\n    key: \"timeTalking\",\n    label: \"Time Talking\",\n    render: colData => {\n      if (colData) {\n        return getHHmmSS(colData)\n      }\n      return \"\"\n    },\n  },\n  {\n    key: \"direction\",\n    label: \"Direction\",\n    render: colData => (\n      <div className={styles.callTypesContainer}>\n        {callTypesHTML[(colData || \"\").toUpperCase()]}\n        {getCamelCaseString(colData)}\n      </div>\n    ),\n  },\n  {\n    key: \"type\",\n    label: \"Type\",\n  },\n  {\n    key: \"flags\",\n    label: \"Flags\",\n    render: colData => <div>{getCamelCaseString(colData)}</div>,\n  },\n  {\n    key: \"policy\",\n    label: \"Policy\",\n  },\n  {\n    key: \"recording\",\n    label: \"Recording\",\n    render: () => (\n      <div className={styles.callTypesContainer}>\n        <Icon\n          path={mdiHeadphones}\n          size={0.8}\n          horizontal\n          vertical\n          rotate={180}\n        />\n        <Link href=\"#\" onClick={() => undefined}>\n          Listen\n        </Link>\n      </div>\n    ),\n  },\n]\n","import React from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport Spinner from \"react-spinkit\"\nimport { gql } from \"apollo-boost\"\nimport Paper from \"@material-ui/core/Paper\"\nimport {\n  PortalTable,\n  Loading,\n  ErrorSnack,\n  ActionBlocks,\n  PortalTablePaging,\n} from \"../../../shared\"\nimport styles from \"./CallLog.module.scss\"\nimport { ICallLog } from \"./CallLogs.type\"\nimport { CallLogProps } from \"./CallLogColProps\"\n\nconst GET_CALL_LOGS = gql`\n  {\n    callLogs {\n      timeStart\n      fromNumber\n      toNumberDialled\n      connectedTo\n      connectedToNumber\n      timeRinging\n      timeTalking\n      direction\n      type\n      flags\n      policy\n      recording\n    }\n  }\n`\n\nexport const CallLogs = () => {\n  const [errorSnack, setErrorSnack] = React.useState(false)\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(100)\n  const { loading, error, data } = useQuery(GET_CALL_LOGS)\n\n  const rows: ICallLog[] =\n    data && data.callLogs && data.callLogs.length !== 0 ? data.callLogs : []\n\n  const handleChangePage = (_, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const pagedRows = rows.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage,\n  )\n\n  const pagesOptions = [100, 150, 200]\n\n  return (\n    <Paper className={styles.paper}>\n      {loading && <Loading spinner={<Spinner name=\"line-scale\" />} />}\n      {error && (\n        <ErrorSnack\n          error={error!.message}\n          open={error! && !errorSnack}\n          handleClose={() => setErrorSnack(true)}\n        />\n      )}\n      {!loading && !error && (\n        <>\n          <ActionBlocks>\n            <PortalTablePaging\n              rowsPerPageOptions={\n                rows && rows.length !== 0\n                  ? [\n                      ...pagesOptions,\n                      ...(rows.length > 200 ? [rows.length] : []),\n                    ]\n                  : pagesOptions\n              }\n              pagesCount={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              handleChangePage={handleChangePage}\n              handleChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </ActionBlocks>\n          <PortalTable<ICallLog>\n            objects={pagedRows}\n            properties={CallLogProps}\n            showCheckBoxColumn\n          />\n        </>\n      )}\n    </Paper>\n  )\n}\n","import React from \"react\"\n\nexport const EventLogs = () => <div>Event Logs</div>\n","import React from \"react\"\n\nexport const BulkDownloads = () => <div>Bulk Downloads</div>\n","import React from \"react\"\n\nexport const MyCalls = () => <div>My Calls</div>\n","import React from \"react\"\n\nexport const SMSMMSLogs = () => <div>SMS MMSLogs</div>\n","import React from \"react\"\nimport {\n  CallLogs,\n  EventLogs,\n  MyCalls,\n  SMSMMSLogs,\n  BulkDownloads,\n} from \"../../components/Logs\"\nimport { TabbedTable } from \"../../components/shared\"\n\nconst LogTabs: Record<string, any> = {\n  \"Call Logs\": <CallLogs />,\n  \"Event Logs\": <EventLogs />,\n  \"SMS/MMS Logs\": <SMSMMSLogs />,\n  \"My Calls\": <MyCalls />,\n  \"Bulk Downloads\": <BulkDownloads />,\n}\n\nconst LogsPage = React.memo(() => <TabbedTable TabsMenu={LogTabs} />)\n\nexport default LogsPage\n"],"sourceRoot":""}