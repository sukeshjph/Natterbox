{"version":3,"sources":["components/Devices/components/Device.module.scss","components/Users/Users.module.scss","components/Numbers/components/Numbers.module.scss","components/Devices/components/DeviceColProps.tsx","components/Devices/components/DeviceQueries.ts","components/Devices/components/DeviceCreate/GeneralSettingsCreate.tsx","components/Devices/components/DeviceCreate/DeviceCreate.tsx","components/Devices/components/DeviceUpdate/GeneralSettingsUpdate.tsx","components/Devices/components/DeviceUpdate/SecuritySettingsUpdate.tsx","components/Devices/components/DeviceUpdate/DeviceUpdate.tsx","components/Devices/components/DeviceList.tsx","pages/devices/DevicesPage.tsx","components/Numbers/components/NumberColProps.tsx","components/Numbers/components/NumberCreate/NumberCreate.tsx","components/Numbers/components/NumberUpdate/NumberUpdate.tsx","components/Numbers/components/NumberList.tsx","pages/numbers/NumbersPage.tsx","components/Users/UserColProps.ts","components/Users/UserDetails.tsx","components/Users/Users.tsx","pages/users/UsersPage.tsx"],"names":["module","exports","DeviceColProps","key","label","render","colData","isEmpty","today","Date","regDate","parseISO","style","display","alignItems","path","isAfter","mdiTimerOffOutline","mdiTimer","size","horizontal","vertical","rotate","getHourMinutesSeconds","differenceInSeconds","VIEW_DEVICE","gql","CREATE_DEVICE","UPDATE_DEVICE","createInitialState","sipExtension","description","location","enabled","GeneralSettingsCreate","refreshData","useState","state","setState","systemGenerated","setSystemGenerated","useMutation","onCompleted","createDevice","mutationLoading","loading","mutationError","error","data","updateField","e","target","type","name","checked","value","formDisabled","isNil","minWidth","noValidate","autoComplete","FormGroup","FormControl","margin","className","styles","formControl","TextField","disabled","id","onChange","InputLabelProps","shrink","InputProps","textControl","FormControlLabel","control","Checkbox","Switch","color","inputProps","Button","variant","onClick","variables","device","DeviceButton","FormLabel","message","DeviceCreate","closeDialog","Paper","Dialog","open","onClose","keepMounted","aria-labelledby","aria-describedby","maxWidth","title","DialogContent","DialogContentText","DialogActions","DeviceInitialState","GeneralSettingsUpdate","useQuery","refetch","deviceState","setDeviceState","password","setPassword","updateDevice","updatedDeviceData","useEffect","pathOr","Loading","onSubmit","catch","class","validators","errorMessages","SecuritySettingsUpdate","options","DeviceUpdate","React","form","setForm","Select","labelId","settingsDropdown","event","MenuItem","generalSettingsUpdate","securitySettings","GET_ALL_DEVICES","DeviceList","errorSnack","setErrorSnack","page","setPage","rowsPerPage","setRowsPerPage","showAddNew","setShowAddNew","show","viewUpdate","setViewUpdate","rows","devices","length","pagedRows","slice","actionEvents","ActionTypes","ADDNEW","pagesOptions","spinner","handleClose","rowsPerPageOptions","pagesCount","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","objects","properties","handleRowClick","showCheckBoxColumn","DevicesPage","memo","NumberColProps","NumberCreate","fullWidth","NumberUpdate","GET_ALL_NUMBERS","pagerOptions","NumberList","pageLength","setPageLength","currentPageIndex","setCurrentPageIndex","useLazyQuery","index","loadNumbers","called","numbersWithPagers","numbers","hasMore","firstIndex","lastIndex","prevIndex","nextIndex","count","handlePageNavigation","pageIndex","totalPagesCount","currentPage","handlePrevPage","handleNextPage","handleFirstPage","handleLastPage","pageLoading","isFirstPage","isLastPage","pageSizeDropdown","map","NumbersPage","UserColProps","UserDetailsColumns","userId","firstName","lastName","primaryMobileNumber","userName","primaryDDI","permissionLevel","GET_USER_DETAILS","UserDetails","showDialog","user","userFullName","userDetailsModal","userDetailsSectionTitles","userSettingsSelect","Object","keys","filter","userKey","defaultValue","GET_ALL_USERS","Users","showUserDetails","setShowUserDetails","cUserId","setCUserId","users","row","UsersPage"],"mappings":"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","file":"static/js/Users.2b1d50bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DeviceButton\":\"Device_DeviceButton__iQ2Bt\",\"formControl\":\"Device_formControl__3Kxid\",\"textControl\":\"Device_textControl__3rWYS\",\"settingsDropdown\":\"Device_settingsDropdown__3ap3y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userDetailsModal\":\"Users_userDetailsModal__3M6up\",\"formControl\":\"Users_formControl__3_HOL\",\"userSettingsSelect\":\"Users_userSettingsSelect__2x_xq\",\"userDetailsSectionTitles\":\"Users_userDetailsSectionTitles__3Tv1e\",\"textControl\":\"Users_textControl__VwzO_\",\"settingsDropdown\":\"Users_settingsDropdown__2aORN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageSizeDropdown\":\"Numbers_pageSizeDropdown__16jbC\"};","import React from \"react\"\nimport { parseISO, isAfter, differenceInSeconds } from \"date-fns\"\nimport { isEmpty } from \"ramda\"\nimport Icon from \"@mdi/react\"\nimport { mdiTimer, mdiTimerOffOutline } from \"@mdi/js\"\nimport { IDevice } from \"./Device.type\"\nimport { getHourMinutesSeconds } from \"../../../util\"\n\nexport const DeviceColProps: IColType<IDevice>[] = [\n  {\n    key: \"id\",\n    label: \"ID\",\n  },\n  {\n    key: \"macAddress\",\n    label: \"Address\",\n  },\n  {\n    key: \"registrationExpiry\",\n    label: \"Registration Expires In\",\n    render: colData => {\n      if (isEmpty(colData)) return \"\"\n\n      const today = new Date()\n      const regDate = parseISO(colData)\n\n      return (\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Icon\n            path={isAfter(today, regDate) ? mdiTimerOffOutline : mdiTimer}\n            size={0.8}\n            horizontal\n            vertical\n            rotate={180}\n          />\n          {isAfter(today, regDate)\n            ? \"Expired\"\n            : getHourMinutesSeconds(differenceInSeconds(regDate, today))}\n        </div>\n      )\n    },\n  },\n]\n","import { gql } from \"apollo-boost\"\n\nexport const VIEW_DEVICE = gql`\n  query device($id: ID) {\n    device(id: $id) {\n      id\n      sipExtension\n      description\n      location\n      enabled\n    }\n  }\n`\n\nexport const CREATE_DEVICE = gql`\n  mutation CreateDevice($device: createDevice!) {\n    createDevice(device: $device) {\n      sipExtension\n      description\n      location\n      enabled\n    }\n  }\n`\n\nexport const UPDATE_DEVICE = gql`\n  mutation UpdateDevice($id: ID, $device: updateDevice!) {\n    updateDevice(id: $id, device: $device) {\n      sipExtension\n      description\n      location\n      enabled\n      password\n    }\n  }\n`\n","import React, { useState } from \"react\"\r\nimport { useMutation } from \"@apollo/react-hooks\"\r\nimport { isNil } from \"ramda\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\r\nimport FormLabel from \"@material-ui/core/FormLabel\"\r\nimport Checkbox from \"@material-ui/core/Checkbox\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport FormGroup from \"@material-ui/core/FormGroup\"\r\nimport { CREATE_DEVICE } from \"../DeviceQueries\"\r\nimport { IDevice } from \"../Device.type\"\r\nimport styles from \"../Device.module.scss\"\r\n\r\nconst createInitialState = {\r\n  sipExtension: \"\",\r\n  description: \"\",\r\n  location: \"\",\r\n  enabled: true,\r\n}\r\n\r\ntype DeviceState = Pick<\r\n  IDevice,\r\n  \"sipExtension\" | \"description\" | \"location\" | \"enabled\"\r\n>\r\n\r\ntype ownProps = {\r\n  refreshData: () => void\r\n}\r\n\r\nconst GeneralSettingsCreate: React.FC<ownProps> = ({ refreshData }) => {\r\n  const [state, setState] = useState<DeviceState>(createInitialState)\r\n\r\n  const [systemGenerated, setSystemGenerated] = useState(false)\r\n\r\n  const [\r\n    createDevice,\r\n    { loading: mutationLoading, error: mutationError, data },\r\n  ] = useMutation(CREATE_DEVICE, {\r\n    onCompleted() {\r\n      refreshData()\r\n    },\r\n  })\r\n\r\n  // Handle the systemGenerated checkbox\r\n  const updateSystemGenerated = e => {\r\n    setSystemGenerated(e.target.checked)\r\n    // TODO - check if i need e.target.checked\r\n    if (systemGenerated)\r\n      setState({\r\n        ...state,\r\n        sipExtension: \"\",\r\n      })\r\n    else\r\n      setState({\r\n        ...state,\r\n        sipExtension: null,\r\n      })\r\n  }\r\n\r\n  // Update the Field\r\n  const updateField = e => {\r\n    if (e.target.type === \"checkbox\")\r\n      setState({\r\n        ...state,\r\n        [e.target.name]: e.target.checked,\r\n      })\r\n\r\n    if (e.target.type === \"text\")\r\n      setState({\r\n        ...state,\r\n        [e.target.name]: e.target.value !== \"\" ? e.target.value : null,\r\n      })\r\n  }\r\n\r\n  // Send Mutation to API\r\n  const submitHandler = () => {\r\n    createDevice({\r\n      variables: {\r\n        device: {\r\n          ...state,\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  const formDisabled = !isNil(data) || mutationLoading\r\n  return (\r\n    <div style={{ minWidth: \"300px\" }}>\r\n      <form noValidate autoComplete=\"off\">\r\n        {mutationError && <p>Error :( Please try again</p>}\r\n        <FormGroup>\r\n          {/*  Address = sipExtension */}\r\n          <FormControl margin=\"normal\" className={styles.formControl}>\r\n            <TextField\r\n              disabled={state.sipExtension === null || formDisabled}\r\n              id=\"standard-basic\"\r\n              name=\"sipExtension\"\r\n              label=\"Address\"\r\n              onChange={updateField}\r\n              InputLabelProps={{ shrink: true }}\r\n              InputProps={{\r\n                className: styles.textControl,\r\n              }}\r\n            />\r\n          </FormControl>\r\n          {/*  CREATED ONLY - System Generated = sipExtension greyed out */}\r\n          <FormControl margin=\"normal\" className={styles.formControl}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={systemGenerated}\r\n                  onChange={updateSystemGenerated}\r\n                  name=\"System Generated\"\r\n                />\r\n              }\r\n              disabled={formDisabled}\r\n              label=\"System generated\"\r\n            />\r\n          </FormControl>\r\n          {/*  Location = location */}\r\n          <FormControl margin=\"normal\" className={styles.formControl}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              onChange={updateField}\r\n              InputLabelProps={{ shrink: true }}\r\n              InputProps={{\r\n                className: styles.textControl,\r\n              }}\r\n              disabled={formDisabled}\r\n            />\r\n          </FormControl>\r\n          {/*  Description = description */}\r\n          <FormControl margin=\"normal\" className={styles.formControl}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              name=\"description\"\r\n              label=\"Description\"\r\n              onChange={updateField}\r\n              InputLabelProps={{ shrink: true }}\r\n              InputProps={{\r\n                className: styles.textControl,\r\n              }}\r\n              disabled={formDisabled}\r\n            />\r\n          </FormControl>\r\n          {/*  Status = enabled  */}\r\n          <FormControl margin=\"normal\">\r\n            <Switch\r\n              checked={state.enabled}\r\n              onChange={updateField}\r\n              color=\"primary\"\r\n              name=\"enabled\"\r\n              disabled={formDisabled}\r\n              inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n            />\r\n          </FormControl>\r\n          {isNil(data) && (\r\n            <Button\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              onClick={submitHandler}\r\n              disabled={formDisabled}\r\n              className={styles.DeviceButton}>\r\n              {mutationLoading ? \"Creating\" : \"Create\"}\r\n            </Button>\r\n          )}\r\n          {!isNil(data) && \"Created the device successfully\"}\r\n          {mutationError && (\r\n            <FormControl margin=\"normal\">\r\n              <FormLabel\r\n                error>{`Error creating a device:${mutationError.message}`}</FormLabel>\r\n            </FormControl>\r\n          )}{\" \"}\r\n        </FormGroup>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GeneralSettingsCreate\r\n","import React from \"react\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport DialogContent from \"@material-ui/core/DialogContent\"\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\r\nimport GeneralSettingsCreate from \"./GeneralSettingsCreate\"\r\nimport { PortalDialogTitle } from \"../../../shared\"\r\n\r\ntype OwnProps = {\r\n  closeDialog: () => void\r\n  refreshData: () => void\r\n}\r\n\r\nexport const DeviceCreate = ({ closeDialog, refreshData }: OwnProps) => {\r\n  return (\r\n    <Paper>\r\n      <Dialog\r\n        open\r\n        onClose={closeDialog}\r\n        keepMounted\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        maxWidth=\"md\">\r\n        <PortalDialogTitle\r\n          title=\"Create a new Device\"\r\n          closeDialog={closeDialog}\r\n        />\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\">\r\n            <GeneralSettingsCreate refreshData={refreshData} />\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions />\r\n      </Dialog>\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\nimport { pathOr, isNil } from \"ramda\"\nimport { useMutation, useQuery } from \"@apollo/react-hooks\"\nimport FormControl from \"@material-ui/core/FormControl\"\n\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport Switch from \"@material-ui/core/Switch\"\nimport Button from \"@material-ui/core/Button\"\nimport FormGroup from \"@material-ui/core/FormGroup\"\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\"\nimport { Loading } from \"../../../shared/Loading/Loading\"\nimport { VIEW_DEVICE, UPDATE_DEVICE } from \"../DeviceQueries\"\nimport { IDevice } from \"../Device.type\"\nimport styles from \"../Device.module.scss\"\n\ntype DeviceState = Pick<\n  IDevice,\n  \"sipExtension\" | \"description\" | \"location\" | \"enabled\" | \"password\"\n>\n\nconst DeviceInitialState = {\n  sipExtension: \"\",\n  description: \"\",\n  location: \"\",\n  enabled: true,\n}\n\ntype ownProps = {\n  id: string\n}\n\nconst GeneralSettingsUpdate: React.FC<ownProps> = ({ id }) => {\n  const { loading, data, refetch } = useQuery(VIEW_DEVICE, {\n    variables: { id },\n  })\n\n  const [deviceState, setDeviceState] = useState<DeviceState>(\n    DeviceInitialState,\n  )\n\n  const [password, setPassword] = useState(false)\n  const [\n    updateDevice,\n    { loading: mutationLoading, data: updatedDeviceData },\n  ] = useMutation(UPDATE_DEVICE, {\n    onCompleted() {\n      refetch()\n    },\n  })\n\n  useEffect(() => {\n    setDeviceState({\n      sipExtension: pathOr(\"\", [\"device\", \"sipExtension\"], data),\n      description: pathOr(null, [\"device\", \"description\"], data),\n      location: pathOr(null, [\"device\", \"location\"], data),\n      enabled: pathOr(true, [\"device\", \"enabled\"], data),\n    })\n  }, [data])\n\n  // Handle the systemGenerated checkbox\n  const updatePassword = e => {\n    setPassword(e.target.checked)\n\n    if (password)\n      setDeviceState({\n        sipExtension: deviceState.sipExtension,\n        description: deviceState.description,\n        location: deviceState.location,\n        enabled: deviceState.enabled,\n      })\n    else\n      setDeviceState({\n        ...deviceState,\n        password: null,\n      })\n  }\n\n  if (loading) return <Loading />\n\n  // Update the Field\n  const updateField = e => {\n    if (e.target.type === \"checkbox\")\n      setDeviceState({\n        ...deviceState,\n        [e.target.name]: e.target.checked,\n      })\n\n    if (e.target.type === \"text\")\n      setDeviceState({\n        ...deviceState,\n        [e.target.name]: e.target.value === \"\" ? null : e.target.value,\n      })\n  }\n\n  // Send Mutation to API\n  const submitHandler = () => {\n    updateDevice({\n      variables: {\n        id,\n        device: {\n          ...deviceState,\n        },\n      },\n    }).catch(() => {})\n  }\n\n  const { sipExtension, location, description, enabled } = deviceState\n\n  const formDisabled = !isNil(updatedDeviceData) || mutationLoading\n\n  return (\n    <div style={{ minWidth: \"350px\" }}>\n      <ValidatorForm onSubmit={submitHandler} autoComplete=\"off\">\n        <FormGroup>\n          <FormGroup>\n            <p>Device ID: {id}</p>\n          </FormGroup>\n          {/*  Address = sipExtension */}\n          <FormControl margin=\"normal\">\n            <TextValidator\n              InputLabelProps={{ shrink: true }}\n              class=\"standard-basic\"\n              name=\"sipExtension\"\n              label=\"Address\"\n              onChange={updateField}\n              value={sipExtension}\n              disabled={formDisabled}\n              InputProps={{\n                className: styles.textControl,\n              }}\n              validators={[\n                \"required\",\n                \"minNumber:12000\",\n                \"maxNumber:17999\",\n                \"isNumber\",\n              ]}\n              errorMessages={[\n                \"This field is required.\",\n                \"Number must be above 12000.\",\n                \"Number must be below 17999.\",\n                \"Must contain only numerical characters.\",\n              ]}\n            />\n          </FormControl>\n\n          {/*  Location = location */}\n          <FormControl margin=\"normal\">\n            <TextValidator\n              InputLabelProps={{ shrink: true }}\n              class=\"standard-basic\"\n              name=\"location\"\n              label=\"Location\"\n              onChange={updateField}\n              value={location}\n              disabled={formDisabled}\n              InputProps={{\n                className: styles.textControl,\n              }}\n            />\n          </FormControl>\n\n          {/*  Description = description */}\n          <FormControl margin=\"normal\">\n            <TextValidator\n              InputLabelProps={{ shrink: true }}\n              class=\"standard-basic\"\n              name=\"description\"\n              label=\"Description\"\n              onChange={updateField}\n              value={description}\n              disabled={formDisabled}\n              InputProps={{\n                className: styles.textControl,\n              }}\n            />\n          </FormControl>\n\n          {/*  Status = enabled  */}\n          <FormControlLabel\n            label=\"enabled\"\n            control={\n              <Switch\n                checked={enabled}\n                onChange={updateField}\n                color=\"primary\"\n                name=\"enabled\"\n                disabled={formDisabled}\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\n              />\n            }\n          />\n\n          {/*  UPDATE ONLY - Reset Password */}\n          <FormControl margin=\"normal\">\n            <FormControlLabel\n              control={\n                <Checkbox\n                  value={password}\n                  onChange={updatePassword}\n                  name=\"System Generated password\"\n                />\n              }\n              label=\"System generated password\"\n              disabled={formDisabled}\n            />\n          </FormControl>\n\n          {isNil(updatedDeviceData) && (\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              variant=\"contained\"\n              disabled={formDisabled}\n              className={styles.DeviceButton}>\n              {mutationLoading ? \"Updating\" : \"Update\"}\n            </Button>\n          )}\n          {!isNil(updatedDeviceData) && \"Updated the device successfully\"}\n        </FormGroup>\n      </ValidatorForm>\n    </div>\n  )\n}\n\nexport default GeneralSettingsUpdate\n","import React from \"react\"\r\n\r\nconst SecuritySettingsUpdate: React.FC<{ id: String }> = ({ id }) => {\r\n  const options = { variables: { id } }\r\n\r\n  return (\r\n    <>\r\n      <div>Security Settings</div>\r\n      <div>{options}</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SecuritySettingsUpdate\r\n","import React from \"react\"\nimport Select from \"@material-ui/core/Select\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Paper from \"@material-ui/core/Paper\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport { PortalDialogTitle } from \"../../../shared\"\nimport styles from \"../Device.module.scss\"\n\nimport GeneralSettingsUpdate from \"./GeneralSettingsUpdate\"\nimport SecuritySettingsUpdate from \"./SecuritySettingsUpdate\"\n\ntype OwnProps = {\n  closeDialog: () => void\n  id: string\n}\n\nexport const DeviceUpdate = ({ closeDialog, id }: OwnProps) => {\n  const [form, setForm] = React.useState(\"generalSettingsUpdate\")\n\n  const handleChange = event => {\n    setForm(event.target.value)\n  }\n\n  return (\n    <Paper>\n      <Dialog\n        open\n        onClose={closeDialog}\n        keepMounted\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        maxWidth=\"md\">\n        <PortalDialogTitle\n          title=\"View/Update Device\"\n          closeDialog={closeDialog}\n        />\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            <>\n              <FormControl>\n                <Select\n                  labelId=\"device-text\"\n                  id=\"device-edit-Type\"\n                  value={form}\n                  className={styles.settingsDropdown}\n                  onChange={handleChange}>\n                  <MenuItem value=\"generalSettingsUpdate\">\n                    General Settings\n                  </MenuItem>\n                  <MenuItem value=\"securitySettings\">\n                    Security Settings\n                  </MenuItem>\n                </Select>\n              </FormControl>\n              {\n                {\n                  generalSettingsUpdate: <GeneralSettingsUpdate id={id} />,\n                  securitySettings: <SecuritySettingsUpdate id={id} />,\n                }[form]\n              }\n            </>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions />\n      </Dialog>\n    </Paper>\n  )\n}\n","import React, { useState } from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport Spinner from \"react-spinkit\"\nimport { gql } from \"apollo-boost\"\nimport Paper from \"@material-ui/core/Paper\"\nimport {\n  PortalTable,\n  Loading,\n  ErrorSnack,\n  ActionBlocks,\n  ActionTypes,\n  PortalTablePaging,\n} from \"../../shared\"\nimport { IDevice } from \"./Device.type\"\nimport { DeviceColProps } from \"./DeviceColProps\"\nimport { DeviceCreate } from \"./DeviceCreate/DeviceCreate\"\nimport { DeviceUpdate } from \"./DeviceUpdate/DeviceUpdate\"\n\nconst GET_ALL_DEVICES = gql`\n  {\n    devices {\n      id\n      macAddress\n      registrationExpiry\n    }\n  }\n`\n\nexport const DeviceList = () => {\n  const [errorSnack, setErrorSnack] = useState(false)\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(100)\n  const [showAddNew, setShowAddNew] = useState(false)\n  const [viewUpdate, setViewUpdate] = useState({\n    show: false,\n    id: \"\",\n  })\n\n  const { loading, error, data, refetch } = useQuery(GET_ALL_DEVICES)\n\n  const rows: IDevice[] =\n    data && data.devices && data.devices.length !== 0 ? data.devices : []\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const handleTableRowClick = e => {\n    setViewUpdate({\n      show: true,\n      id: e.id,\n    })\n  }\n\n  const pagedRows = rows.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage,\n  )\n\n  const actionEvents = {\n    [ActionTypes.ADDNEW]: () => setShowAddNew(true),\n  }\n\n  const pagesOptions = [100, 150, 200]\n\n  return (\n    <Paper>\n      {loading && <Loading spinner={<Spinner name=\"line-scale\" />} />}\n      {error && (\n        <ErrorSnack\n          error={error!.message}\n          open={error! && !errorSnack}\n          handleClose={() => setErrorSnack(true)}\n        />\n      )}\n      {!loading && !error && (\n        <>\n          <ActionBlocks actionEvents={actionEvents}>\n            <PortalTablePaging\n              rowsPerPageOptions={\n                rows && rows.length !== 0\n                  ? [\n                      ...pagesOptions,\n                      ...(rows.length > 200 ? [rows.length] : []),\n                    ]\n                  : pagesOptions\n              }\n              pagesCount={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              handleChangePage={handleChangePage}\n              handleChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </ActionBlocks>\n          <PortalTable<IDevice>\n            objects={pagedRows}\n            properties={DeviceColProps}\n            handleRowClick={handleTableRowClick}\n            showCheckBoxColumn\n          />\n          {showAddNew && (\n            <DeviceCreate\n              closeDialog={() => setShowAddNew(false)}\n              refreshData={() => refetch()}\n            />\n          )}\n          {viewUpdate.show && (\n            <DeviceUpdate\n              id={viewUpdate.id}\n              closeDialog={() =>\n                setViewUpdate({\n                  show: false,\n                  id: \"\",\n                })\n              }\n            />\n          )}\n        </>\n      )}\n    </Paper>\n  )\n}\n","import React from \"react\"\nimport Devices from \"../../components/Devices\"\nimport { NoTabTable } from \"../../components/shared\"\n\nconst DevicesPage: React.FC<{}> = React.memo(() => (\n  <NoTabTable>\n    <Devices />\n  </NoTabTable>\n))\n\nexport default DevicesPage\n","import { isEmpty, isNil } from \"ramda\"\nimport { INumber } from \"./Number.type\"\n\nexport const NumberColProps: IColType<INumber>[] = [\n  {\n    key: \"label\",\n    label: \"Label\",\n  },\n  {\n    key: \"countryCode\",\n    label: \"Country Code\",\n  },\n  {\n    key: \"number\",\n    label: \"Number\",\n  },\n  {\n    key: \"userId\",\n    label: \"DDI\",\n    render: colData => {\n      if (isEmpty(colData) || isNil(colData)) return \"No\"\n      return \"Yes\"\n    },\n  },\n]\n","import React from \"react\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\n\r\ntype OwnProps = {\r\n  closeDialog: () => void\r\n}\r\n\r\nexport const NumberCreate = ({ closeDialog }: OwnProps) => {\r\n  return (\r\n    <Paper>\r\n      <Dialog\r\n        open\r\n        onClose={closeDialog}\r\n        keepMounted\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        fullWidth\r\n        maxWidth=\"md\"\r\n      />\r\n    </Paper>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\n\r\ntype OwnProps = {\r\n  closeDialog: () => void\r\n}\r\n\r\nexport const NumberUpdate = ({ closeDialog }: OwnProps) => {\r\n  return (\r\n    <Paper>\r\n      <Dialog\r\n        open\r\n        onClose={closeDialog}\r\n        keepMounted\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        fullWidth\r\n        maxWidth=\"md\"\r\n      />\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\nimport { useLazyQuery } from \"@apollo/react-hooks\"\nimport Spinner from \"react-spinkit\"\nimport { gql } from \"apollo-boost\"\nimport Paper from \"@material-ui/core/Paper\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport Select from \"@material-ui/core/Select\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport {\n  PortalTable,\n  Loading,\n  ErrorSnack,\n  ActionBlocks,\n  ActionTypes,\n  PortalServerPaging,\n} from \"../../shared\"\nimport { INumberWithPagers, INumber } from \"./Number.type\"\nimport { NumberColProps } from \"./NumberColProps\"\nimport styles from \"./Numbers.module.scss\"\n\nimport { NumberCreate } from \"./NumberCreate/NumberCreate\"\nimport { NumberUpdate } from \"./NumberUpdate/NumberUpdate\"\n\nconst GET_ALL_NUMBERS = gql`\n  query numbers($index: Int, $length: Int) {\n    numbers(index: $index, length: $length) {\n      hasMore\n      firstIndex\n      lastIndex\n      prevIndex\n      nextIndex\n      count\n      numbers {\n        number\n        countryCode\n        areaCode\n        label\n      }\n    }\n  }\n`\n\nconst pagerOptions = [100, 150, 250, 400]\n\nexport const NumberList = () => {\n  const [errorSnack, setErrorSnack] = useState(false)\n  const [showAddNew, setShowAddNew] = useState(false)\n  const [viewUpdate, setViewUpdate] = useState({\n    show: false,\n    id: \"\",\n  })\n  const [pageLength, setPageLength] = useState(pagerOptions[0])\n  const [currentPageIndex, setCurrentPageIndex] = useState(0)\n\n  const [loadNumbers, { called, loading, error, data }] = useLazyQuery(\n    GET_ALL_NUMBERS,\n    {\n      variables: {\n        index: currentPageIndex,\n        length: pageLength,\n      },\n    },\n  )\n\n  useEffect(() => {\n    loadNumbers()\n  }, [])\n\n  const numbersWithPagers: INumberWithPagers =\n    data && data.numbers\n      ? data.numbers\n      : {\n          hasMore: false,\n          firstIndex: 0,\n          lastIndex: 0,\n          prevIndex: 0,\n          nextIndex: 0,\n          count: 0,\n          numbers: [],\n        }\n\n  const {\n    count,\n    hasMore,\n    firstIndex,\n    lastIndex,\n    prevIndex,\n    nextIndex,\n    numbers: rows,\n  } = numbersWithPagers\n\n  const handlePageSizeChange = event => {\n    setPageLength(event.target.value)\n    loadNumbers()\n  }\n\n  const handlePageNavigation = (pageIndex: number) => () => {\n    setCurrentPageIndex(pageIndex)\n    loadNumbers()\n  }\n\n  const handleTableRowClick = e => {\n    setViewUpdate({\n      show: true,\n      id: e.id,\n    })\n  }\n\n  const actionEvents = {\n    [ActionTypes.ADDNEW]: () => setShowAddNew(true),\n  }\n\n  return (\n    <Paper>\n      {called && loading && <Loading spinner={<Spinner name=\"line-scale\" />} />}\n      {error && (\n        <ErrorSnack\n          error={error!.message}\n          open={error! && !errorSnack}\n          handleClose={() => setErrorSnack(true)}\n        />\n      )}\n      {!loading && !error && (\n        <>\n          <ActionBlocks actionEvents={actionEvents}>\n            <PortalServerPaging\n              totalPagesCount={count}\n              currentPage={currentPageIndex}\n              hasMore={hasMore}\n              handlePrevPage={handlePageNavigation(prevIndex)}\n              handleNextPage={handlePageNavigation(nextIndex)}\n              handleFirstPage={handlePageNavigation(firstIndex)}\n              handleLastPage={handlePageNavigation(lastIndex)}\n              pageLoading={loading}\n              isFirstPage={currentPageIndex === 0}\n              isLastPage={currentPageIndex === lastIndex}>\n              <FormControl>\n                <Select\n                  labelId=\"page-select\"\n                  id=\"page-select-id\"\n                  value={pageLength}\n                  className={styles.pageSizeDropdown}\n                  onChange={handlePageSizeChange}>\n                  {pagerOptions.map(page => (\n                    <MenuItem value={page}>{page}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </PortalServerPaging>\n          </ActionBlocks>\n          <PortalTable<INumber>\n            objects={rows}\n            properties={NumberColProps}\n            handleRowClick={handleTableRowClick}\n            showCheckBoxColumn\n          />\n          {showAddNew && (\n            <NumberCreate closeDialog={() => setShowAddNew(false)} />\n          )}\n          {viewUpdate.show && (\n            <NumberUpdate\n              closeDialog={() =>\n                setViewUpdate({\n                  show: false,\n                  id: \"\",\n                })\n              }\n            />\n          )}\n        </>\n      )}\n    </Paper>\n  )\n}\n","import React from \"react\"\nimport NumberList from \"../../components/Numbers\"\nimport { NoTabTable } from \"../../components/shared\"\n\nconst NumbersPage: React.FC<{}> = React.memo(() => (\n  <NoTabTable>\n    <NumberList />\n  </NoTabTable>\n))\n\nexport default NumbersPage\n","import { IUser } from \"./User.type\"\n\nexport const UserColProps: IColType<IUser>[] = [\n  {\n    key: \"userId\",\n    label: \"ID\",\n  },\n  {\n    key: \"userName\",\n    label: \"Login Name\",\n  },\n  {\n    key: \"sipExtension\",\n    label: \"Extension\",\n  },\n  {\n    key: \"primaryMobileNumber\",\n    label: \"Primary DDI\",\n  },\n  {\n    key: \"firstName\",\n    label: \"First Name\",\n  },\n  {\n    key: \"lastName\",\n    label: \"Last Name\",\n  },\n  {\n    key: \"primaryMobileNumber\",\n    label: \"Primary Mobile\",\n  },\n  {\n    key: \"permissionLevel\",\n    label: \"User Permissions\",\n  },\n  {\n    key: \"enabled\",\n    label: \"Status\",\n  },\n  {\n    key: \"previousLogin\",\n    label: \"Previous Login\",\n  },\n]\n\nexport const UserDetailsColumns = {\n  userId: \"ID\",\n  firstName: \"First Name\",\n  lastName: \"Last Name\",\n  primaryMobileNumber: \"Primary Mobile\",\n  userName: \"Login Name\",\n  enabled: \"Status\",\n  sipExtension: \"Extension\",\n  primaryDDI: \"Primary DDI\",\n  permissionLevel: \"User Permissions\",\n}\n","import React from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { gql } from \"apollo-boost\"\nimport Paper from \"@material-ui/core/Paper\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Select from \"@material-ui/core/Select\"\nimport TextField from \"@material-ui/core/TextField\"\n// import InputLabel from \"@material-ui/core/InputLabel\"\nimport FormGroup from \"@material-ui/core/FormGroup\"\n// import Input from \"@material-ui/core/Input\"\nimport { Loading, ErrorSnack, PortalDialogTitle } from \"../shared\"\nimport { IUser } from \"./User.type\"\nimport styles from \"./Users.module.scss\"\nimport { UserDetailsColumns } from \"./UserColProps\"\n\nconst GET_USER_DETAILS = gql`\n  query GetUserById($userId: ID!) {\n    user(id: $userId) {\n      userId\n      userName\n      firstName\n      lastName\n      sipExtension\n      permissionLevel\n      primaryMobileNumber\n    }\n  }\n`\n\ntype OwnProps = {\n  userId: number\n  showDialog: boolean\n  closeDialog: () => void\n}\n\nexport const UserDetails: React.FC<OwnProps> = ({\n  userId,\n  showDialog,\n  closeDialog,\n}: OwnProps) => {\n  const [errorSnack, setErrorSnack] = React.useState(false)\n  const { loading, error, data } = useQuery(GET_USER_DETAILS, {\n    variables: { userId },\n  })\n\n  if (loading) return <Loading />\n  if (error)\n    return (\n      <ErrorSnack\n        error={error!.message}\n        open={error! && !errorSnack}\n        handleClose={() => setErrorSnack(true)}\n      />\n    )\n\n  const user: IUser = data && data.user ? data.user : {}\n  const userFullName = `${(user || {}).firstName || \"\"} ${(user || {})\n    .lastName || \"\"}`\n\n  return (\n    <Paper>\n      <Dialog\n        open={showDialog}\n        keepMounted\n        fullWidth\n        maxWidth=\"md\"\n        onClose={() => closeDialog()}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\">\n        <PortalDialogTitle title={userFullName} closeDialog={closeDialog} />\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            <div className={styles.userDetailsModal}>\n              <FormGroup>\n                <span\n                  className={\n                    styles.userDetailsSectionTitles\n                  }>{`User ID: ${user.userId || \"\"} - ${user.userName ||\n                  \"\"}`}</span>\n                <FormControl className={styles.userSettingsSelect}>\n                  <Select\n                    labelId=\"settings-select\"\n                    id=\"settings-select-id\"\n                    value=\"General\"\n                    className={styles.settingsDropdown}\n                    onChange={() => false}>\n                    <MenuItem value=\"General\">General</MenuItem>\n                  </Select>\n                </FormControl>\n                <span className={styles.userDetailsSectionTitles}>\n                  My Account\n                </span>\n                <div id=\"details\">\n                  {Object.keys(UserDetailsColumns)\n                    .filter(userKey => userKey !== \"userId\")\n                    .map(userKey => (\n                      <TextField\n                        id={userKey}\n                        label={UserDetailsColumns[userKey]}\n                        defaultValue={user[userKey]}\n                        margin=\"normal\"\n                        className={styles.formControl}\n                        InputLabelProps={{\n                          shrink: true,\n                        }}\n                        InputProps={{\n                          className: styles.textControl,\n                        }}\n                      />\n                    ))}\n                </div>\n                <div id=\"password\">\n                  <TextField\n                    id=\"newPin\"\n                    label=\"New Pin\"\n                    margin=\"normal\"\n                    className={styles.formControl}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      className: styles.textControl,\n                    }}\n                  />\n                  <TextField\n                    id=\"newPassword\"\n                    label=\"New Password\"\n                    margin=\"normal\"\n                    className={styles.formControl}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      className: styles.textControl,\n                    }}\n                  />\n                </div>\n              </FormGroup>\n            </div>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions />\n      </Dialog>\n    </Paper>\n  )\n}\n","import React, { useState } from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport Spinner from \"react-spinkit\"\nimport { gql } from \"apollo-boost\"\nimport Paper from \"@material-ui/core/Paper\"\nimport {\n  PortalTable,\n  Loading,\n  ErrorSnack,\n  ActionBlocks,\n  PortalTablePaging,\n} from \"../shared\"\nimport { IUser } from \"./User.type\"\nimport { UserColProps } from \"./UserColProps\"\nimport { UserDetails } from \"./UserDetails\"\n\nconst GET_ALL_USERS = gql`\n  {\n    users {\n      userName\n      userId\n      firstName\n      lastName\n    }\n  }\n`\n\nexport const Users = () => {\n  const [errorSnack, setErrorSnack] = useState(false)\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(100)\n  const [showUserDetails, setShowUserDetails] = useState(false)\n  const [cUserId, setCUserId] = useState(0)\n  const { loading, error, data } = useQuery(GET_ALL_USERS)\n\n  const rows: IUser[] =\n    data && data.users && data.users.length !== 0 ? data.users : []\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const pagedRows = rows.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage,\n  )\n\n  const handleTableRowClick = (row: Partial<IUser>) => {\n    setShowUserDetails(true)\n    setCUserId(row.userId!)\n  }\n\n  const pagesOptions = [100, 150, 200]\n\n  return (\n    <Paper>\n      {loading && <Loading spinner={<Spinner name=\"line-scale\" />} />}\n      {error && (\n        <ErrorSnack\n          error={error!.message}\n          open={error! && !errorSnack}\n          handleClose={() => setErrorSnack(true)}\n        />\n      )}\n      {!loading && !error && (\n        <>\n          <ActionBlocks>\n            <PortalTablePaging\n              rowsPerPageOptions={\n                rows && rows.length !== 0\n                  ? [\n                      ...pagesOptions,\n                      ...(rows.length > 200 ? [rows.length] : []),\n                    ]\n                  : pagesOptions\n              }\n              pagesCount={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              handleChangePage={handleChangePage}\n              handleChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </ActionBlocks>\n          <PortalTable<IUser>\n            objects={pagedRows}\n            properties={UserColProps}\n            handleRowClick={handleTableRowClick}\n            showCheckBoxColumn\n          />\n          {showUserDetails && (\n            <UserDetails\n              userId={cUserId}\n              showDialog={showUserDetails}\n              closeDialog={() => setShowUserDetails(false)}\n            />\n          )}\n        </>\n      )}\n    </Paper>\n  )\n}\n","import React from \"react\"\nimport Users from \"../../components/Users\"\nimport { NoTabTable } from \"../../components/shared\"\n\nconst UsersPage: React.FC<{}> = React.memo(() => (\n  <NoTabTable>\n    <Users />\n  </NoTabTable>\n))\n\nexport default UsersPage\n"],"sourceRoot":""}